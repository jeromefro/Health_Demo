cur = cumsum(cur)
df <- data.frame(df, cur)
}
head(df)
N = 1e3
set.seed(530)
df <- data.frame(time = 1:1000)
for (i in 1:10) {
cur = rnorm(N, 0, 1)
cur = cumsum(cur)
df <- data.frame(df, paste0("trial", i) = cur)
}
?df
?data.frame
N = 1e3
set.seed(530)
df <- data.frame(time = 1:1000)
col_names = c()
for (i in 1:10) {
c(col_names, paste0("trial", i))
cur = rnorm(N, 0, 1)
cur = cumsum(cur)
df <- data.frame(df, cur)
}
N = 1e3
set.seed(530)
df <- data.frame(time = 1:1000)
col_names = c()
for (i in 1:10) {
col_names <- c(col_names, paste0("trial", i))
cur = rnorm(N, 0, 1)
cur = cumsum(cur)
df <- data.frame(df, cur)
}
colnames(df)[2:11] <- col_names
head(df)
df <- melt(df, id = "time")
ggplot(data = df,
aes(x=time, y=value, color=variable)) +
geom_line()
N = 1e3
set.seed(530)
df <- data.frame(time = 1:1000)
col_names = c()
for (i in 1:15) {
col_names <- c(col_names, paste0("trial", i))
cur = rnorm(N, 0, 1)
cur = cumsum(cur)
df <- data.frame(df, cur)
}
colnames(df)[2:16] <- col_names
df <- melt(df, id = "time")
ggplot(data = df, aes(x=time, y=value, color=variable))
+ geom_line()
N = 1e3
cols = 10
N = 1e3
cols = 10
set.seed(530)
df <- data.frame(time = 1:1000)
col_names = c()
for (i in 1:cols) {
col_names <- c(col_names, paste0("trial", i))
cur = rnorm(N, 0, 1)
cur = cumsum(cur)
df <- data.frame(df, cur)
}
colnames(df)[2:(cols+1)] <- col_names
df <- melt(df, id = "time")
ggplot(data = df, aes(x=time, y=value, color=variable))
+ geom_line()
ggplot(data = df, aes(x=time, y=value, color=variable)) + geom_line()
cols = 15
set.seed(530)
df <- data.frame(time = 1:1000)
col_names = c()
for (i in 1:cols) {
col_names <- c(col_names, paste0("trial", i))
cur = rnorm(N, 0, 1)
cur = cumsum(cur)
df <- data.frame(df, cur)
}
colnames(df)[2:(cols+1)] <- col_names
df <- melt(df, id = "time")
ggplot(data = df, aes(x=time, y=value, color=variable)) + geom_line()
ggplot(data = df, aes(x=time, y=value, color=variable)) +
geom_line() +
geom_line(x = 1:N, y = sqrt(1:N))
geom_line(x = 1:N, y = sqrt(1:N))
geom_line(aes(x = 1:N, y = sqrt(1:N)))
qplot(x = 1:N, y = sqrt(1:N))
ggplot(data = df, aes(x=time, y=value, color=variable)) +
geom_line() +
qplot(x = 1:N, y = sqrt(1:N))
ggplot(data = df, aes(x=time, y=value, color=variable)) +
geom_line() +
geom_line(aes(x=time, y=sqrt(time)))
geom_line(aes(x=time, y=sqrt(time), color = "black"))
ggplot(data = df, aes(x=time, y=value, color=variable)) +
geom_line() +
geom_line(aes(x=time, y=sqrt(time), color = "black"))
ggplot(data = df, aes(x=time, y=value, color=variable)) +
geom_line()
ggplot(data = df) +
geom_line(aes(x=time, y=value, color=variable)) +
geom_line(aes(x=time, y=sqrt(time), color = "black"))
ggplot(data = df) +
geom_line(aes(x=time, y=sqrt(time), color = "black")) +
geom_line(aes(x=time, y=value, color=variable))
ggplot(data = df) +
geom_line(aes(x=time, y=value, color=variable))
ggplot(data = df) +
geom_line(aes(x=time, y=value, color=variable)) +
stat_smooth(aes(x=time, y=sqrt(time)))
ggplot(data = df) +
geom_line(aes(x=time, y=value, color=variable)) +
stat_smooth(aes(x=time, y=sqrt(time), color="black"))
ggplot(data = df) +
geom_line(aes(x=time, y=value, color=variable)) +
stat_smooth(aes(x=time, y=sqrt(time)))
ggplot(data = df) +
geom_line(aes(x=time, y=value, color=variable))
ggplot(data = df) +
geom_line(aes(x=time, y=sqrt(time)) +
geom_line(aes(x=time, y=sqrt(time))
fhghgh
ggplot(data = df) +
geom_line(aes(x=time, y=sqrt(time))) +
geom_line(aes(x=time, y=sqrt(time)))
ggplot(data = df) +
geom_line(aes(x=time, y=sqrt(time))) +
geom_line(aes(x=time, y=-sqrt(time)))
p1 <- ggplot(data = df) +
geom_line(aes(x=time, y=value, color=variable))
p2 <- ggplot(data = df) +
geom_line(aes(x=time, y=sqrt(time))) +
geom_line(aes(x=time, y=-sqrt(time)))
test <- data.frame(time = 1:1000, upper = sqrt(1:1000), lower = -sqrt(1:1000))
ggplot(data = df) +
geom_line(aes(x=time, y=value, color=variable)) +
geom_line(data= test, aes(x=time, y = upper))
geom_line(data= test, aes(x=time, y = lower))
ggplot(data = df) +
geom_line(aes(x=time, y=value, color=variable)) +
geom_line(data= test, aes(x=time, y = upper)) +
geom_line(data= test, aes(x=time, y = lower))
bounds <- data.frame(time = 1:1000, upper = sqrt(1:1000), lower = -sqrt(1:1000))
ggplot(data = df) +
geom_line(aes(x=time, y=value, color=variable)) +
geom_line(data= bounds, aes(x=time, y = upper)) +
geom_line(data= bounds, aes(x=time, y = lower))
rm(list=ls)
rm(list=ls())
N = 1e3
cols = 15
set.seed(530)
col_names = c()
df <- data.frame(time = 1:1000)
for (i in 1:cols) {
col_names <- c(col_names, paste0("trial", i))
cur = rnorm(N, 0, 1)
cur = cumsum(cur)
df <- data.frame(df, cur)
}
colnames(df)[2:(cols+1)] <- col_names
df <- melt(df, id = "time")
bounds <- data.frame(time = 1:1000, upper = sqrt(1:1000), lower = -sqrt(1:1000))
ggplot(data = df) +
geom_line(aes(x=time, y=value, color=variable)) +
geom_line(data= bounds, aes(x=time, y = upper)) +
geom_line(data= bounds, aes(x=time, y = lower))
?sapply
sims <- sapply(1:10, sim)
N = 1000
set.seed(775)
sim <- function() {
sum(rnorm(N))
}
sims <- sapply(1:10, sim)
sim <- function(i) {
sum(rnorm(N))
hgf
fjfjfjfj)
N = 1000
set.seed(775)
sim <- function(i) {
sum(rnorm(N))
}
sims <- sapply(1:10, sim)
hist(sims)
N = 1000
set.seed(775)
sim <- function(i) {
sum(rnorm(N))
}
sims <- sapply(1:1000, sim)
N = 1000
trials = 1e4
sim <- function(i) {
set.seed(775)
sum(rnorm(N))
}
sims <- sapply(1:trials, sim)
qplot(sims)
range(sims)
sims <- sapply(1:trials, sim)
rm(list=ls())
N = 1000
trials = 1e4
set.seed(775)
sim <- function(i) {
steps <- rnorm(N)
sum(steps)
}
sims <- sapply(1:trials, sim)
qplot(sims)
range(sims)
qplot(sims, binwidth=30)
qplot(sims, binwidth=20)
qplot(sims, binwidth=15)
qplot(sims, binwidth=10)
qplot(sims, binwidth=5)
qplot(sims)
qplot(sims) + geom_vline(xintercept = 0)
qplot(sims) + geom_vline(xintercept = 0, size = 3)
qplot(sims) + geom_vline(xintercept = 0, size = 2)
qplot(sims) + geom_vline(xintercept = c(0, sqrt(1000), -sqrt(1000)), size = 2)
qplot(sims) + geom_vline(xintercept = c(0, sqrt(1000), -sqrt(1000)), size = 1.5)
hist(sims)
qplot(sims, color = "darkgreen") + geom_vline(xintercept = c(0, sqrt(1000), -sqrt(1000)), size = 1.5)
qplot(sims, colour = "darkgreen") + geom_vline(xintercept = c(0, sqrt(1000), -sqrt(1000)), size = 1.5)
qplot(sims, color = "darkgreen", fill="white") + geom_vline(xintercept = c(0, sqrt(1000), -sqrt(1000)), size = 1.5)
qplot(sims, color = I("darkgreen"), fill="white") + geom_vline(xintercept = c(0, sqrt(1000), -sqrt(1000)), size = 1.5)
qplot(sims, color = I("darkgreen"), fill=(I"white")) + geom_vline(xintercept = c(0, sqrt(1000), -sqrt(1000)), size = 1.5)
qplot(sims, color = I("darkgreen"), fill=I("white")) + geom_vline(xintercept = c(0, sqrt(1000), -sqrt(1000)), size = 1.5)
qplot(sims, color = I("darkgreen"), fill=I("white"))
summary(sims)
qplot(sims, geom = "density")
?rpois
vel = rnorm(N, 0, 1)
ti = rpois(N, 1)
dis = rep(0, N)
rm(list=ls())
sim <- function(i) {
vel = rnorm(N, 0, 1)
ti = rpois(N, 1)
dis = rep(0, N)
for (i in 1:N) {
dis[i] = vel[i]*ti[i]
}
dis = cumsum(dis)
}
test <- sim(1)
N = 1e3
sim <- function(i) {
vel = rnorm(N, 0, 1)
ti = rpois(N, lam)
dis = rep(0, N)
for (i in 1:N) {
dis[i] = vel[i]*ti[i]
}
dis = cumsum(dis)
}
test <- sim(1)
lam = 1
test <- sim(1)
test <- sim(1)
test <- sim(1)
test <- sim(1)
test <- rpois(1000, 1)
test <- rpois(1000, 1)
test <- rpois(1000, 1)
test <- rpois(1000, 1)
N = 1e3
set.seed(908)
lam = 1
sim <- function(i) {
vel = rnorm(N, 0, 1)
ti = rpois(N, lam)
dis = rep(0, N)
for (i in 1:N) {
dis[i] = vel[i]*ti[i]
}
dis = cumsum(dis)
}
cols = 15
df <- data.frame(time = 1:1000)
col_names = c()
for (i in 1:cols) {
col_names <- c(col_names, paste0("trial", i))
cur = sim(i, lam)
df <- data.frame(df, cur)
}
for (i in 1:cols) {
col_names <- c(col_names, paste0("trial", i))
cur = sim(i)
df <- data.frame(df, cur)
}
colnames(df)[2:(cols+1)] <- col_names
N = 1e3
set.seed(908)
lam = 1
sim <- function(i) {
vel = rnorm(N, 0, 1)
ti = rpois(N, lam)
dis = rep(0, N)
for (i in 1:N) {
dis[i] = vel[i]*ti[i]
}
dis = cumsum(dis)
}
cols = 15
df <- data.frame(time = 1:1000)
col_names = c()
for (i in 1:cols) {
col_names <- c(col_names, paste0("trial", i))
cur = sim(i)
df <- data.frame(df, cur)
}
length(colnames(df))
colnames(df)[2:(cols+1)] <- col_names
head(df)
df <- melt(df, id = "time")
ggplot(data = df) +
geom_line(aes(x=time, y=value, color=variable)) +
geom_line(data= bounds, aes(x=time, y = upper)) +
geom_line(data= bounds, aes(x=time, y = lower))
ggplot(data = df) +
geom_line(aes(x=time, y=value, color=variable))
ggplot(data = df) +
geom_line(aes(x=time, y=value, color=variable)) +
geom_line(data= bounds, aes(x=time, y = upper)) +
geom_line(data= bounds, aes(x=time, y = lower))
bounds <- data.frame(time = 1:1000, upper = sqrt(1:1000), lower = -sqrt(1:1000))
ggplot(data = df) +
geom_line(aes(x=time, y=value, color=variable)) +
geom_line(data= bounds, aes(x=time, y = upper)) +
geom_line(data= bounds, aes(x=time, y = lower))
suppressPackageStartupMessages(library(googleVis))
plot(gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400)))
head(Fruits)
dim(Fruits)
Fruits
?read.csv
read.csv(file.choose(), header=TRUE)
dat <- read.csv(file.choose(), header=TRUE)
?read.csv
dat <- read.table("Table 2.1.1.1M .txt", header=TRUE, sep = "\t")
dat
require(googleVis)
require(shiny)
install.packages("RCurl")
library(RCurl)
url <- "https://raw.githubusercontent.com/mages/diesunddas/master/Data/US%20Presidential%20Elections.csv"
dat <- getURL(url, ssl.verifypeer=0L, followlocation=1L)
dat <- read.csv(text=dat)
head(dat)
datminmax = data.frame(state=rep(c("Min", "Max"),21),
demVote=rep(c(0, 100),21),
year=sort(rep(seq(1932,2012,4),2)))
dat <- rbind(dat[,1:3], datminmax)
gvisGeoChart(myData,
locationvar="state", colorvar="demVote",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}"
))
myYear <- 2000
myData <- subset(dat,
(year > (myYear()-1)) & (year < (myYear()+1)))
myYear <- 2000
myData <- subset(dat,
(year > (myYear()-1)) & (year < (myYear()+1)))
myData <- subset(dat, (year > (myYear-1)) & (year < (myYear+1)))
gvisGeoChart(myData,
locationvar="state", colorvar="demVote",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}"
))
plot(gvisGeoChart(myData,
locationvar="state", colorvar="demVote",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}"
)))
setwd("~/R_Code/ShinyDemo2")
shiny::runApp()
shiny::runApp()
setwd("~/")
library(XML)
install.packages("XML")
library(XML)
URL = "http://www.cdc.gov/mmwr/preview/mmwrhtml/mm6317a1.htm?s_cid=mm6317a1_w"
table = readHTMLTable(URL)
statewise = table[[1]]  # first of two tables on that page
head(table)
head(statewise)
colnames(statewise) = c("State", "HeartDiseasesObserved", "HeartDiseasesExpected",
"HeartDiseasesPreventable", "CancerDiseasesObserved", "CancerDiseasesExpected",
"CancerDiseasesPreventable", "ChroniclowerrespiratoryDiseasesObserved",
"ChroniclowerrespiratoryDiseasesExpected", "ChroniclowerrespiratoryDiseasesPreventable",
"CerebrovascularDiseasesObserved", "CerebrovascularDiseasesExpected", "CerebrovascularDiseasesPreventable",
"UnintentionalinjuriesObserved", "UnintentionalinjuriesExpected", "UnintentionalinjuriesPreventable")
statewise = statewise[-(1:3), ]
statewise = statewise[-(52:53), ]
str(statewise)
for (i in 2:16){statewise[, i] = as.character(statewise[,i])}
for (i in 2:16){statewise[, i] = gsub(",","",statewise[,i])}
for (i in 2:16){statewise[, i] = as.numeric(statewise[,i])}
library(googleVis)
plot(gvisTable(statewise,options=list(height=400, width=800)))
statewise$PercentageHeartDiseasesPreventable = round(statewise$HeartDiseasesPreventable *
100/statewise$HeartDiseasesObserved, 2)
statewise$PercentageCancerDiseasesPreventable = round(statewise$CancerDiseasesPreventable *
100/statewise$CancerDiseasesObserved, 2)
statewise$PercentageChroniclowerrespiratoryDiseasesPreventable = round(statewise$ChroniclowerrespiratoryDiseasesPreventable *
100/statewise$ChroniclowerrespiratoryDiseasesObserved, 2)
statewise$PercentageCerebrovascularDiseasesPreventable = round(statewise$CerebrovascularDiseasesPreventable *
100/statewise$CerebrovascularDiseasesObserved, 2)
statewise$PercentageUnintentionalinjuriesPreventable = round(statewise$UnintentionalinjuriesPreventable *
100/statewise$UnintentionalinjuriesObserved, 2)
statewise$PercentageAveragePreventableDeaths = round((statewise$PercentageHeartDiseasesPreventable +
statewise$PercentageCancerDiseasesPreventable + statewise$PercentageChroniclowerrespiratoryDiseasesPreventable +
statewise$PercentageCerebrovascularDiseasesPreventable + statewise$PercentageUnintentionalinjuriesPreventable)/5,
2)
setwd("~/R_Code/Shiny/ShinyDemo3")
save(statewise, file = "statewise.Rda")
library(reshape2)
statewisemelt = melt(statewise, id = "State")
statewisemelt$variable = factor(statewisemelt$variable, levels(statewisemelt$variable)[c(21,
16:20, 1:15)])
save(statewisemelt, file = "statewisemelt.Rda")
shiny::runApp()
dat <- read.table("Table 2.1.1.1M .txt", header=TRUE, sep = "\t")
setwd("~/")
dat <- read.table("Table 2.1.1.1M .txt", header=TRUE, sep = "\t")
rm(list=ls())
dat <- read.table("Table 2.1.1.1M .txt", header=TRUE, sep = "\t")
dat
set.seed(10)
messy <- data.frame(
id = 1:4,
trt = sample(rep(c('control', 'treatment'), each = 2)),
home.T1 = runif(4),
work.T1 = runif(4),
work.T2 = runif(4),
home.T2 = runif(4)
)
messy
tidier <- messy %>%
gather(key, time, -id, -trt)
tidier %>% head(8)
library(tidyr)
library(dplyr)
tidier <- messy %>%
gather(key, time, -id, -trt)
tidier %>% head(8)
messy
dat <- read.table("cancer.txt", header=TRUE, sep = "\t")
dat <- read.table("cancer.txt", header=TRUE, sep = "\t")
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
?sliderInput
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
?helpText
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
shiny::runApp('Health_Demo')
library(shinyApps)
library(shiny)
library(shinyapps)
setwd("~/Health_Demo")
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
df <- read.csv("./CHSI/DEMOGRAPHICS.csv")
head(df)
names(df)
library(dplyr)
str(df)
library(maps)
?maps
data(county)
data(countyMapEnv)
head(countyMapEnv)
map("county")
